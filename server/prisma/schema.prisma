// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Timetable {
  id           Int           @id @default(autoincrement())
  name         String
  slots        Slot[]
  groups       Group[]
  subdivisions Subdivision[]
  tags         Tag[]
  types        Type[]
  teachers     Teacher[]
  classrooms   Classroom[]
}

model Slot {
  id                      Int                      @id @default(autoincrement())
  day                     Int
  number                  Int
  timetableId             Int
  timetable               Timetable                @relation(fields: [timetableId], references: [id])
  teacherUnavailables     TeacherUnavailable[]
  subdivisionUnavailables SubdivisionUnavailable[]
  classroomUnavailables   ClassroomUnavailable[]
  slotDatas               SlotData[]
}

model Group {
  id                Int       @id @default(autoincrement())
  name              String
  allowSimultaneous Int
  timetableId       Int
  timetable         Timetable @relation(fields: [timetableId], references: [id])
  subjects          Subject[]
}

model Subdivision {
  id                     Int                      @id @default(autoincrement())
  name                   String
  timetableId            Int
  timetable              Timetable                @relation(fields: [timetableId], references: [id])
  subdivionTags          SubdivisionTag[]
  subdivsionUnavailables SubdivisionUnavailable[]
  lectureSubdivisions    LectureSubdivision[]
}

model Tag {
  id           Int              @id @default(autoincrement())
  name         String
  timetableId  Int
  timetable    Timetable        @relation(fields: [timetableId], references: [id])
  subjectTags  SubjectTag[]
  subdivisions SubdivisionTag[]
  teacherTags  TeacherTag[]
}

model Type {
  id             Int             @id @default(autoincrement())
  name           String
  timetableId    Int
  timetable      Timetable       @relation(fields: [timetableId], references: [id])
  subjectTypes   SubjectType[]
  slassroomTypes ClassroomType[]
}

model SubdivisionUnavailable {
  slotId        Int
  subdivisionId Int
  slot          Slot        @relation(fields: [slotId], references: [id])
  subdivision   Subdivision @relation(fields: [subdivisionId], references: [id])
  timetableId   Int?

  @@id([slotId, subdivisionId])
}

model SubdivisionTag {
  tagId         Int
  subdivisionId Int
  tag           Tag         @relation(fields: [tagId], references: [id])
  subdivision   Subdivision @relation(fields: [subdivisionId], references: [id])

  @@id([tagId, subdivisionId])
}

model Subject {
  id             Int           @id @default(autoincrement())
  name           String
  duration       Int
  groupId        Int
  group          Group         @relation(fields: [groupId], references: [id])
  tags           SubjectTag[]
  classroomTypes SubjectType[]
  lectures       Lecture[]
}

model SubjectTag {
  tagId     Int
  subjectId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([tagId, subjectId])
}

model SubjectType {
  typeId    Int
  subjectId Int
  type      Type    @relation(fields: [typeId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([typeId, subjectId])
}

model Teacher {
  id          Int                  @id @default(autoincrement())
  name        String
  timetableId Int
  timetable   Timetable            @relation(fields: [timetableId], references: [id])
  slots       TeacherUnavailable[]
  tags        TeacherTag[]
  lectures    Lecture[]
}

model TeacherUnavailable {
  slotId    Int
  teacherId Int
  slot      Slot    @relation(fields: [slotId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([slotId, teacherId])
}

model TeacherTag {
  teacherId Int
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([teacherId, tagId])
}

model Classroom {
  id          Int                    @id @default(autoincrement())
  name        String
  timetableId Int
  timetable   Timetable              @relation(fields: [timetableId], references: [id])
  types       ClassroomType[]
  slots       ClassroomUnavailable[]
  lectures    LectureClassroom[]
}

model ClassroomType {
  classroomId Int
  typeId      Int
  type        Type      @relation(fields: [typeId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  @@id([classroomId, typeId])
}

model ClassroomUnavailable {
  slotId      Int
  classroomId Int
  slot        Slot      @relation(fields: [slotId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  @@id([slotId, classroomId])
}

model Lecture {
  id           Int                  @id @default(autoincrement())
  teacherId    Int
  subjectId    Int
  count        Int                  @default(1)
  teacher      Teacher              @relation(fields: [teacherId], references: [id])
  subject      Subject              @relation(fields: [subjectId], references: [id])
  subdivisions LectureSubdivision[]
  classrooms   LectureClassroom[]
  slotDatas    SlotData[]

  @@unique([teacherId, subjectId])
}

model SlotData {
  id        Int     @id @default(autoincrement())
  slotId    Int
  lectureId Int
  isLocked  Boolean @default(false)
  slot      Slot    @relation(fields: [slotId], references: [id])
  lecture   Lecture @relation(fields: [lectureId], references: [id])

  @@unique([slotId, lectureId])
}

model LectureSubdivision {
  subdivisionId Int
  lectureId     Int
  subdivision   Subdivision @relation(fields: [subdivisionId], references: [id])
  lecture       Lecture     @relation(fields: [lectureId], references: [id])

  @@id([subdivisionId, lectureId])
}

model LectureClassroom {
  classroomId Int
  lectureId   Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  lecture     Lecture   @relation(fields: [lectureId], references: [id])

  @@id([classroomId, lectureId])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}
